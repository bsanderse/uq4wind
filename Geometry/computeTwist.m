  function  samplesTwist = computeTwist(samples, randVec, pc, plotSamples,bladeLength,...
                                      interpolationLocations,referenceTwist,...
                                      t0,n,sampledLocations,sampledValues)
% This routine computes the random samples of Twist vector using the purturbed
% control points of NURB curve

% Input arguments
% 'samples' Number of samples of perturbed twist
% 'randVec' a samples-by-numOfControlPoints matrix of random numbers
% 'pc' is vector with each element bw [0,1] representing fraction of perturbation for each control point from their baseline value.
% 'plotSamples' 0 for no plot, 1 (default) to plot the generated samples, the baseline curve and the control points
% 'interpolationLocations' Points along the blade length according to ECNAERO module input file 
% 'referenceTwist' Reference values of twist obtained from ECNAERO module input file
% 't0' Knot vector b/w [0,1], the number of resulting basis function is numel(t0)+1
% 'n' NURBS order: 2 for linear B-splines, 3 for Quadratic, so on. The polynomial degree of B-spline is n-1.
% 'sampledLocations' Locations where the value of twist is sample. NOTE: numel(sampleLocations) =  numel(t0) + 1
% 'sampledValues' Vales of twist at sampled location
  

% Output argument
% 'samplesTwist' are samples of twist generated by perturbing the baseline control points. Each row corresponds to one sample.

if nargin < 5 % Default function argument values corresponding to NM80 turbine
    bladeLength = 38.8; % To normalize the blade length bw [0,1]   
    interpolationLocations = [0 2 4 6 8 10 12 14 16 18 20 22 ...
                          24 26 28 30 32 34 36 37 38 38.4 38.8]; 
                      
    referenceTwist = [0 5.37 6.69 7.9 9.11 10.19 9.39 7.16 5.45 4.34 3.5 2.86 ... 
                 2.31 1.77 1.28 0.9 0.55 0.23 0.03 0.02 0.93 2.32 6.13]; 
             
    t0 = [0 0.051 0.154 0.257 0.309 0.412 0.515 0.721 0.963 1]; 
    n = 2;
    sampledLocations = [0 2 6 10 12 16 20 28 37 38.8]; 
    sampledValues = [0 5.37 7.9 10.19 9.39 5.45 3.5 1.28 0.02 6.13]; 
    %pc = 0.1*ones(numel(sampledLocations),1);
end

interpolationLocations = interpolationLocations/bladeLength; % Normalized between [0,1]
sampledLocations = sampledLocations/bladeLength; % Normalized between [0,1]


c = getControlPoints(sampledLocations,sampledValues,t0,n); % control points for NURB curve
t = [t0(1)*ones(1,n-1) t0 t0(end)*ones(1,n-1)]; % padded knot vector obtained by padding n-1 elements at front and end. 
j = 0: numel(t)- n-1; % Index of B-spline from 0 =< j < numel(t)-n

samplesTwist = zeros(1,numel(interpolationLocations)); % 'sampleTwist' is the function values of NURB curve interpolated at sampleLocations

for i = 1:numel(j)
    [y,interpolationLocations] = bspline_basis(j(i),n,t,interpolationLocations);
    samplesTwist = samplesTwist + c(i)*y;
end

if plotSamples == 1
    % Plot to check the Twist variation along the blade span. This can be used to 
    % select the knot locations 
    figure
    plot(interpolationLocations,referenceTwist,'linewidth',2) 
    hold on
    plot(sampledLocations,c,'marker','o','linewidth',2) % plot control points
    plot(sampledLocations,sampledValues,'marker','x','markersize',8,'linestyle','none','linewidth',2) % plot sampled points
    plot(interpolationLocations,samplesTwist,'linewidth',2,'color','g')
end
samplesTwist = perturbNURBS(t0,n,interpolationLocations,c, pc,samples,randVec);

if plotSamples == 1
    plot(interpolationLocations,samplesTwist','color','k','linestyle','--','HandleVisibility','off')
    plot(interpolationLocations,samplesTwist(1,:),'color','k','linestyle','--')
    legend('reference Twist','control points','sampled data', 'NURB curve','random samples')
    hold off
end
return