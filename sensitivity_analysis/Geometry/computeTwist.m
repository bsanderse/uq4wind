  function  pertTwist = computeTwist(samples, index, randVec, pc, plotSamples,bladeLength,...
                                      interpolationLocations,referenceTwist,...
                                      t0,n,sampledLocations,sampledValues)
% This routine computes the random samples of Twist vector using the purturbed
% control points of NURB curve

% Input arguments
% 'samples' Number of samples of perturbed twist
% 'randVec' a samples-by-numOfControlPoints matrix of random numbers
% 'pc' is vector with each element between [0,1] representing fraction of perturbation for each control point from their baseline value.
% 'plotSamples' 0 for no plot, 1 (default) to plot the generated samples, the baseline curve and the control points
% 'interpolationLocations' Points along the blade length according to ECNAERO module input file 
% 'referenceTwist' Reference values of twist obtained from ECNAERO module input file
% 't0' Knot vector b/w [0,1], the number of resulting basis function is numel(t0)+1
% 'n' NURBS order: 2 for linear B-splines, 3 for Quadratic, so on. The polynomial degree of B-spline is n-1.
% 'sampledLocations' Locations where the value of twist is sample. NOTE: numel(sampleLocations) =  numel(t0) + 1
% 'sampledValues' Vales of twist at sampled location
  
% Output argument
% 'samplesTwist' are samples of twist generated by perturbing the baseline control points. Each row corresponds to one sample.

if nargin < 6 % Default function argument values corresponding to NM80 turbine
    bladeLength = 38.8; % To normalize the blade length bw [0,1]   
    interpolationLocations = [0 2 4 6 8 10 12 14 16 18 20 22 ...
                          24 26 28 30 32 34 36 37 38 38.4 38.8]; 
                      
    referenceTwist = [0 5.37 6.69 7.9 9.11 10.19 9.39 7.16 5.45 4.34 3.5 2.86 ... 
                 2.31 1.77 1.28 0.9 0.55 0.23 0.03 0.02 0.93 2.32 6.13]; 
             
% Linear B splines
    t0 = [0 0.051 0.154 0.257 0.309 0.412 0.515 0.721 0.876 0.953 0.979 1]; 
    n = 2;
    sampledLocations =interpolationLocations([1 2 4 6 7 9 11 15 18 20 21 23]); 
    sampledValues = referenceTwist([1 2 4 6 7 9 11 15 18 20 21 23]); 

end

%% set up NURBS

% normalize inputs
interpolationLocations = interpolationLocations/bladeLength; % Normalized between [0,1]
sampledLocations       = sampledLocations/bladeLength; % Normalized between [0,1]

% get NURBS basis function matrix
[Bref, t] = getNURBSBasisMatrix(sampledLocations,t0,n); % get basis matrix
% get control points by solving the NURBS equation system
c = getControlPoints(Bref,sampledValues); % control points for NURBS curve

% now the NURBS curve is fully defined and can be evaluated at different
% positions
% 'samplesCurve' is the function values of NURBS curve interpolated at interpolationLocations
Bu  = getNURBSBasisMatrix(interpolationLocations,t0,n);
samplesTwist = evalNURBS(Bu,c);


%% now create perturbations
% create vector for perturbations
pc_mod = zeros(numel(sampledLocations),1);
% magnitude of perturbation that is used to scale the random numbers
pc_mod(index(:)) = pc;

% value of random variable
randVec_mod = zeros(numel(sampledLocations),1);
randVec_mod(index(:)) = randVec;

% this is a key step, where the perturbation is added to the baseline
c_pert    = c.*(1+pc_mod.*randVec_mod);
pertTwist = evalNURBS(Bu,c_pert);


%% make plots
% plotSamples=1;
if plotSamples == 1
    % Plot to check the twist variation along the blade span. This can be used to 
    % select the knot locations     
    figure
    plot(interpolationLocations,referenceTwist,'linewidth',2) 
    hold on
    plot(sampledLocations,c,'marker','o','linewidth',2) % plot control points
    plot(sampledLocations,sampledValues,'marker','x','markersize',8,'linestyle','none','linewidth',2) % plot sampled points
    plot(interpolationLocations,samplesTwist,'linewidth',2)
    plot(interpolationLocations,pertTwist,'linestyle','--')
    legend('reference twist','control points','sampled data', 'NURBS approximation to reference','perturbed curve')
    hold off
end

return