function  pertChord = computeChord(samples,index, randVec, pc, plotSamples,bladeLength,...
                                      interpolationLocations,referenceChord,...
                                      t0,n,sampledLocations,sampledValues)

% Only works for samples = 1 
% Example: 
% samplesChord = computeChord(1,[3:5], rand(10,3), 0.1*ones(3,1), 1)

% This routine computes the random samples of Chord vector using the perturbed
% control points of NURBS curve

% Input arguments
% 'samples' Number of samples of perturbed Chord
% 'index' is a integer>=1 prescribing the index of control points we want
% to perturb
% 'randVec' a samples-by-numOfControlPoints matrix of random numbers
% 'pc' is vector with each element bw [0,1] representing fraction of perturbation for each control point from their baseline value.
% 'plotSamples' 0 for no plot, 1 (default) to plot the generated samples, the baseline curve and the control points
% 'interpolationLocations' Points along the blade length according to ECNAERO module input file 
% 'referenceChord' Reference values of Chord obtained from ECNAERO module input file
% 't0' Knot vector b/w [0,1], the number of resulting basis function is numel(t0)+1
% 'n' NURBS order: 2 for linear B-splines, 3 for Quadratic, so on. The polynomial degree of B-spline is n-1.
% 'sampledLocations' Locations where the value of chord is sample. NOTE: numel(sampleLocations) =  numel(t0) + 1
% 'sampledValues' Vales of chord at sampled location
% 'pc' is vector with each element bw [0,1] representing fraction of perturbation for control points from their baseline value. The numel(pc) = numel(sampledLocations)  

% Output argument
% 'samplesChord' are samples of Chord generated by perturbing the baseline control points. Each row corresponds to one sample.

if nargin < 6 % Default function argument values corresponding to NM80 turbine
    bladeLength = 38.8; % To normalize the blade length bw [0,1]   
    interpolationLocations = [0 2 4 6 8 10 12 14 16 18 20 22 ...
                          24 26 28 30 32 34 36 37 38 38.4 38.8]; 
                      
    referenceChord = [2.42 2.48 2.65 2.81 2.98 3.14 3.17 2.99 2.79 2.58 2.38 ...
                  2.21 2.06 1.92 1.8 1.68 1.55 1.41 1.18 0.98 0.62 0.48 0.07]; 
             
    t0 = [0 0.15 0.3 0.51 0.7 0.87 0.95 1]; 
    n = 3;
    sampledLocations = [0 4 10 16 20 30 34 37 38.8]; 
    sampledValues = [2.42 2.65 3.14 2.79 2.38 1.68 1.41 0.98 0.07]; 
    
end

%% set up NURBS

% normalize inputs
interpolationLocations = interpolationLocations/bladeLength; % Normalized between [0,1]
sampledLocations       = sampledLocations/bladeLength; % Normalized between [0,1]

% get NURBS basis function matrix
[Bref, t] = getNURBSBasisMatrix(sampledLocations,t0,n); % get basis matrix
% get control points by solving the NURBS equation system
c = getControlPoints(Bref,sampledValues); % control points for NURBS curve

% now the NURBS curve is fully defined and can be evaluated at different
% positions
% 'samplesCurve' is the function values of NURBS curve interpolated at interpolationLocations
Bu  = getNURBSBasisMatrix(interpolationLocations,t0,n);
samplesChord = evalNURBS(Bu,c);


%% now create perturbations
% create vector for perturbations
pc_mod = zeros(numel(sampledLocations),1);
% magnitude of perturbation that is used to scale the random numbers
pc_mod(index(:)) = pc;

% value of random variable
randVec_mod = zeros(numel(sampledLocations),1);
randVec_mod(index(:)) = randVec;

% this is a key step, where the perturbation is added to the baseline
c_pert    = c.*(1+pc_mod.*randVec_mod);
pertChord = evalNURBS(Bu,c_pert);


%% make plots

if plotSamples == 1
    % Plot to check the Chord variation along the blade span. This can be used to 
    % select the knot locations     
    figure
    plot(interpolationLocations,referenceChord,'linewidth',2) 
    hold on
    plot(sampledLocations,c,'marker','o','linewidth',2) % plot control points
    plot(sampledLocations,sampledValues,'marker','x','markersize',8,'linestyle','none','linewidth',2) % plot sampled points
    plot(interpolationLocations,samplesChord,'linewidth',2)
    plot(interpolationLocations,pertChord,'linestyle','--')
    legend('reference Chord','control points','sampled data', 'NURBS approximation to reference','perturbed curve')
    hold off
end
return