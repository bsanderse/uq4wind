function Results = uq_inversion(CurrentAnalysis)
% UQ_INVERSION is the entry point for the calculation of an inverse 
%    analysis in UQLab. The appropriate solver is run based on the supplied
%    options.
%
%    See also: UQ_MH, UQ_AM, UQ_HMC, UQ_AIES


%% RETRIEVE THE VALIDATED SENSITIVITY OPTIONS
Options = CurrentAnalysis.Internal;

%% Initialize
% problem options
Solv_Opt = Options.Solver;

%% Select the Solver
switch upper(Options.Solver.Type)
    case 'NONE'  %initialize only
        Results = 0;
        if Options.Display > 0
            fprintf('\nInitialization of Bayesian analysis complete.\n');
        end    
    case 'MCMC'  % markov chain monte carlo
        % get MCMC options
        MCMC_Opt = Solv_Opt.MCMC;

        % switch between samplers
        switch upper(MCMC_Opt.Sampler)
            case 'MH'
                % Metroplis Hastings Algorithm:
            if Options.Display > 0
                fprintf('\nStarting Metropolis Hastings Algorithm...\n');
            end

            % run MH algorithm
            [   Results.Sample, ...
                Results.Acceptance, ...
                Results.Time , ...
                Results.ForwardModel, ...
                Results.LogLikeliEval] = uq_MH(...
                                            MCMC_Opt.Steps, ...
                                            MCMC_Opt.Seed, ...
                                            MCMC_Opt.Proposal.Handle,...
                                            Solv_Opt.LogPrior, ...
                                            Solv_Opt.LogLikelihood, ...
                                            MCMC_Opt.Visualize, ...
                                            MCMC_Opt.StoreModel);
                                        
            if Options.Display > 0
                fprintf('\nFinished Metropolis Hastings Algorithm!\n');
            end
                                        
            case 'AM' 
                % Adaptive Metropolis (Haario et. al 2001)
            if Options.Display > 0
                fprintf('\nStarting Adaptive Metropolis...\n');
            end
            
            % run AM algorithm
            [   Results.Sample, ...
                Results.Acceptance, ...
                Results.Time , ...
                Results.ForwardModel, ...
                Results.LogLikeliEval] = uq_AM(...
                                            MCMC_Opt.Steps, ...
                                            MCMC_Opt.Seed, ...
                                            MCMC_Opt.T0, ...
                                            MCMC_Opt.Epsilon, ...
                                            MCMC_Opt.Proposal.Handle, ...
                                            Solv_Opt.LogPrior, ...
                                            Solv_Opt.LogLikelihood,  ...
                                            MCMC_Opt.Visualize, ...
                                            MCMC_Opt.StoreModel);
                                        
            if Options.Display > 0
                fprintf('\nFinished Adaptive Metropolis!\n');
            end
                                        
            case 'AIES' 
                % Affine invariant ensemble sampler (Goodman & Weare et. al 2010)
            if Options.Display > 0
                fprintf('\nStarting AIES...\n');
            end


            % run AIES algorithm
            [   Results.Sample, ...
                Results.Acceptance, ...
                Results.Time , ...
                Results.ForwardModel, ...
                Results.LogLikeliEval] = uq_AIES(...
                                            MCMC_Opt.Steps, ...
                                            MCMC_Opt.Seed, ...
                                            MCMC_Opt.a,...
                                            Solv_Opt.LogPrior, ...
                                            Solv_Opt.LogLikelihood, ...
                                            MCMC_Opt.Visualize, ...
                                            MCMC_Opt.StoreModel);
                                        
            if Options.Display > 0
                fprintf('\nFinished AIES!\n');
            end
            
            case 'HMC'   
                % hamiltonian monte carlo
            if Options.Display > 0
                fprintf('\nStarting Hamiltonian Monte Carlo...\n');
            end

            % run HMC algorithm
            [   Results.Sample, ...
                Results.Acceptance, ...
                Results.Time, ...
                Results.ForwardModel, ...
                Results.LogLikeliEval] = uq_HMC(...
                                            MCMC_Opt.Steps, ...
                                            MCMC_Opt.LeapfrogSteps, ...
                                            MCMC_Opt.LeapfrogSize, ...
                                            MCMC_Opt.Mass, ...
                                            MCMC_Opt.Seed,...
                                            Solv_Opt.LogPrior, ...
                                            Solv_Opt.LogLikelihood, ...
                                            MCMC_Opt.Visualize, ...
                                            MCMC_Opt.StoreModel);

            if Options.Display > 0
                fprintf('\nFinished Hamiltonian Monte Carlo!\n');
            end
        end
        
        % Post-process MCMC sample: compute mean and 5- and
        % 95-percentiles
        [Results.PostProc.Percentiles.Mean, Results.PostProc.Percentiles.Var] = uq_inversion_mean(Results.Sample);
        Results.PostProc.PointEstimate.Parameter = uq_inversion_mean(Results.Sample);
        Results.PostProc.PointEstimate.Type = 'mean';
        Results.PostProc.Percentiles.Probabilities = [0.05,0.95];
        Results.PostProc.Percentiles.Values = ...
            uq_inversion_percentiles(Results.Sample,Results.PostProc.Percentiles.Probabilities);
    otherwise
        error('The selected solver "%s" is not implemented in the uq_inversion module.', Options.Solver.Type);
end